apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: authorization_server
    app.kubernetes.io/instance: uaa-standalone
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/name: uaa
    app.kubernetes.io/part-of: uaa
    app.kubernetes.io/version: 76.6.0
  name: uaa
spec:
  selector: 
    matchLabels:
      app: uaa-deployment
  replicas: 1
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9102'
        prometheus.io/path: '/metrics'
      labels:
        app: uaa-deployment
        app.kubernetes.io/component: authorization_server
        app.kubernetes.io/instance: uaa-standalone
        app.kubernetes.io/managed-by: kubectl
        app.kubernetes.io/name: uaa
        app.kubernetes.io/part-of: uaa
        app.kubernetes.io/version: 76.6.0
    spec: #! pod spec
      serviceAccountName: uaa
      initContainers:
      - name: build-uaa-truststore
        image: 593597821733.dkr.ecr.us-west-2.amazonaws.com/smarsh/uaa:1.0.0
        command:
        - 'sh'
        - '-c'
        - |
          find_keytool_or_fail_fast() {
            local has_keytool
            ls "${JAVA_HOME}"/bin/keytool
            has_keytool=$?

            if [ ${has_keytool} -ne 0 ]; then
              exit ${has_keytool}
            fi
          }

          import_cert() {
            local pemfile="${1}"
            local alias="${2}"

            echo "Adding ${pemfile} to truststore"

            # Have to use cat instead of -file
            # because keytool won't understand all of the filenames!
            cat "${pemfile}" | "${JAVA_HOME}"/bin/keytool \
              -noprompt \
              -import \
              -trustcacerts \
              -alias "${alias}" \
              -keystore "${TRUSTSTORE_FILE}" \
              -storepass "${TRUSTSTORE_PASSWORD}"
          }

          get_alias() {
            local pemfile="${1}"
            basename "${pemfile}" .pem
          }

          add_ca_certs() {
            local has_ca_certs
            ls ${SECRETS_DIR}/ca_certs/*.pem
            has_ca_certs=$?

            if [ ${has_ca_certs} -eq 0 ]; then
              for cert in ${SECRETS_DIR}/ca_certs/*.pem; do
                import_cert "${cert}" "$(get_alias $cert)"
              done
            fi
          }

          add_system_certs() {
            for cert in $OS_CERTS_DIR/*.pem; do
              import_cert "${cert}" "$(get_alias $cert)"
            done
          }

          main() {
            find_keytool_or_fail_fast
            add_ca_certs
            add_system_certs
          }

          main
        env:
        - name: SECRETS_DIR
          value: /etc/secrets
        - name: TRUSTSTORE_FILE
          value: /etc/truststore/uaa.pkcs12.truststore
        - name: TRUSTSTORE_PASSWORD
          value: changeit
        - name: OS_CERTS_DIR
          value: /etc/ssl/certs
        volumeMounts:
        - name: ca-certs-files
          mountPath: /etc/secrets/ca_certs
          readOnly: true
        - name: truststore-file
          mountPath: /etc/truststore
      - name: nginx
        image: 593597821733.dkr.ecr.us-west-2.amazonaws.com/smarsh/nginx-test
        command: 
        - 'sh'
        - '-c'
        - |          
          cd /tmp/db && envsubst < database_credentials.yml | tee /etc/secrets/database_credentials.yml
          cd /tmp/admin && envsubst < admin_client_credentials.yml | tee /etc/secrets/admin_client_credentials.yml
          cd /tmp/jwt && envsubst < jwt_policy_signing_keys.yml | tee /etc/secrets/jwt_policy_signing_keys.yml && cd /etc/secrets && sed -i '/BEGIN/,${ /BEGIN/! s@^@            @}'  jwt_policy_signing_keys.yml
          cd /tmp/uaa_config && envsubst < uaa.yml | tee /etc/config/uaa.yml && cp log4j2.properties /etc/config
          cd /tmp/saml && envsubst < saml_keys.yml | tee /etc/secrets/saml_keys.yml && cd /etc/secrets/ && sed -i '/BEGIN RSA/,/PRIVATE KEY/ { /BEGIN RSA/! s@^@          @}' saml_keys.yml && sed -i '/BEGIN CERTIFICATE/,${ /BEGIN CERTIFICATE/! s@^@          @}' saml_keys.yml
          cd /tmp/encryption && envsubst < encryption_keys.yml | tee /etc/secrets/encryption_keys.yml
        env: 
        - name: jwttoken
          valueFrom:
            secretKeyRef:
              name: uaa-secret-jwt-token
              key: private_key
        - name: username
          valueFrom:
            secretKeyRef:
              name: uaa-secret-uaa-db
              key: uaa-db-username
        - name: password
          valueFrom:
            secretKeyRef:
              name: uaa-secret-uaa-db
              key: uaa-db-password   
        - name: hostname
          valueFrom:
            secretKeyRef:
              name: uaa-secret-uaa-db
              key: uaa-db-hostname
        - name: database
          valueFrom:
            secretKeyRef:
              name: uaa-secret-uaa-db
              key: uaa-db-database
        - name: adminclientsecret
          valueFrom:
            secretKeyRef:
              name: uaa-secret-admin-secret
              key: value
        - name: uaa_app_client_secret
          valueFrom:
            secretKeyRef:
              name: uaa-secret-admin-secret
              key: value  
        - name: cfmgmt_uaa_client_secret
          valueFrom:
            secretKeyRef:
              name: uaa-secret-admin-secret
              key: value    
        - name: certificate
          valueFrom:
            secretKeyRef:
              name: uaa-secret-jwt-token
              key: certificate
        - name: encryptionkeys
          valueFrom:
            secretKeyRef:
              name: uaa-secret-encryption-key-secret
              key: encryption_key
        volumeMounts:
        - name: dir-for-yaml
          mountPath: /etc/secrets
        - name: dir-for-config
          mountPath: /etc/config
        - name: jwt-policy-signing-keys-file
          mountPath: /tmp/jwt
        - name: database-credentials-file
          mountPath: /tmp/db
        - name: admin-client-credentials-file
          mountPath: /tmp/admin
        - name: uaa-config
          mountPath: /tmp/uaa_config   
        - name: saml-keys-file
          mountPath: /tmp/saml   
        - name: encryption-keys-file
          mountPath: /tmp/encryption           
      containers:
      - name: uaa
        image: 593597821733.dkr.ecr.us-west-2.amazonaws.com/smarsh/uaa:1.0.0
        resources:
          requests:
            memory: 512Mi
            cpu: 50m
          limits:
            memory: 2000Mi
            cpu: 500m
        ports:
        - name: http-uaa
          containerPort: 8080
          protocol: TCP
        env:
        - name: BPL_TOMCAT_ACCESS_LOGGING
          value: "y"
        - name: JAVA_OPTS
          value: -Dspring_profiles=postgresql -Djava.security.egd=file:/dev/./urandom
            -Dlogging.config=/etc/config/log4j2.properties -Dlog4j.configurationFile=/etc/config/log4j2.properties
            -DCLOUDFOUNDRY_CONFIG_PATH=/etc/config -DSECRETS_DIR=/etc/secrets -Djavax.net.ssl.trustStore=/etc/truststore/uaa.pkcs12.truststore
            -Djavax.net.ssl.trustStoreType=PKCS12 -Djavax.net.ssl.trustStorePassword=changeit
            -Dstatsd.enabled=true -Dservlet.session-store=database
        volumeMounts:
        - name: dir-for-config
          mountPath: /etc/config
        # - name: dir-for-yaml
        #   mountPath: /etc/secrets
        - name: smtp-credentials-file
          mountPath: /etc/secrets/smtp_credentials.yml
          subPath: smtp_credentials.yml
          readOnly: true
        - name: dir-for-yaml
          mountPath: /etc/secrets/database_credentials.yml
          subPath: database_credentials.yml
          readOnly: true
        - name: dir-for-yaml
          mountPath: /etc/secrets/admin_client_credentials.yml
          subPath: admin_client_credentials.yml
          readOnly: true
        - name: dir-for-yaml
          mountPath: /etc/secrets/jwt_policy_signing_keys.yml
          subPath: jwt_policy_signing_keys.yml
          readOnly: true
        - name: truststore-file
          mountPath: /etc/truststore
          readOnly: true
        - name: dir-for-yaml
          mountPath: /etc/secrets/saml_keys.yml
          subPath: saml_keys.yml
          readOnly: true
        - name: dir-for-yaml
          mountPath: /etc/secrets/encryption_keys.yml
          subPath: encryption_keys.yml
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: http-uaa
          failureThreshold: 25
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 180
        readinessProbe:
          httpGet:
            path: /healthz
            port: http-uaa
          initialDelaySeconds: 60
          periodSeconds: 15
          failureThreshold: 20
          timeoutSeconds: 180
      volumes:
      - name: uaa-config
        configMap:
          name: uaa-config
      - name: smtp-credentials-file
        secret:
          optional: true
          secretName: uaa-smtp-credentials
      - name: database-credentials-file
        secret:
          optional: true
          secretName: uaa-database-credentials
      - name: admin-client-credentials-file
        secret:
          secretName: uaa-admin-client-credentials
      - name: jwt-policy-signing-keys-file
        secret:
          secretName: uaa-jwt-policy-signing-keys
          defaultMode: 0777
      - name: ca-certs-files
        secret:
          optional: true
          secretName: uaa-ca-certs
      - name: truststore-file
        emptyDir: {}
      - name: saml-keys-file
        secret:
          optional: false
          secretName: uaa-saml-keys
      - name: encryption-keys-file
        secret:
          optional: false
          secretName: encryption-keys
      - name: dir-for-yaml
        emptyDir: {}
      - name: dir-for-config
        emptyDir: {}
